scripts:
  default: nps dev
  dev:
    description: Shortcut to a basic client dev environment
    script: nps run.clientDashboard
  prod:
    description: Shortcut to a production run workflow
    script: nps.run.prod
  build:
    prod:
      description: Build your client code production style
      script: cross-env DEBUG=climbing-app* PORT=3001 NODE_ENV=production webpack --config=./config/webpack.config.production.js
  run:
    description: Various ways to run the climbing app components
    clientDashboard:
      description: Monitor your client code and run dev server. This does not reload server!
      script: "cross-env DEBUG=climbing-app* PORT=3001 webpack-dashboard -- nps run.devServer"
    devServer:
      description: Run dev server. This does not reload server!
      script: "cross-env DEBUG=climbing-app* PORT=3001 TS_NODE_COMPILER_OPTIONS='{ \"module\": \"commonjs\" }' ts-node ./dev-server.ts"
    api:
      description: Run just the API
      script: cross-env DEBUG=climbing-app* PORT=3001 ts-node ./src/typescript/server.ts
    apiWatch:
      description: Watch just the API
      script: cross-env DEBUG=climbing-app* PORT=3001 tsnd --respawn ./src/typescript/server.ts
    prod:
      description: Build and run code like in production
      script: cross-env-shell DEBUG=climbing-app* NODE_ENV=production PORT=3001 "nps run.prod.sub"
      sub:
        description: The actual commands to run
        script: concurrent "nps build.prod" "nps run.api"
  db:
    description: Database level commands
    migration:
      description: Proxies to TypeORM Migrations, but make sure we compile first
      generate:
        script: nps compile && ts-node ./node_modules/typeorm/cli.js migration:generate
      _generate:
        description: Sub-Generate command, run if you want to skip compile step
        script: ts-node ./node_modules/typeorm/cli.js migration:generate
      run:
        script: ts-node ./node_modules/typeorm/cli.js migration:run
      just_do_it:
        script: nps db.migration.generate && nps db.migration.run
  lint:
    description: Lint the code, duh
    script: tslint --project . && echo 'Linted successfully'
    fix:
      description: Fix all the code problems we can
      script: tslint --project . --fix && echo 'Lint problems fixed'
  compile:
    description: Compile all typescript resources to javascript.
    script: tsc --project .
  test:
    description: Run test suite
    script: mocha ./test/**/*.ts
