// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: climb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClimbService_GetCrag_FullMethodName    = "/pb.ClimbService/GetCrag"
	ClimbService_ListCrags_FullMethodName  = "/pb.ClimbService/ListCrags"
	ClimbService_UpdateCrag_FullMethodName = "/pb.ClimbService/UpdateCrag"
)

// ClimbServiceClient is the client API for ClimbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClimbServiceClient interface {
	GetCrag(ctx context.Context, in *GetCragRequest, opts ...grpc.CallOption) (*GetCragResponse, error)
	ListCrags(ctx context.Context, in *ListCragsRequest, opts ...grpc.CallOption) (*ListCragsResponse, error)
	UpdateCrag(ctx context.Context, in *UpdateCragRequest, opts ...grpc.CallOption) (*ListCragsResponse, error)
}

type climbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClimbServiceClient(cc grpc.ClientConnInterface) ClimbServiceClient {
	return &climbServiceClient{cc}
}

func (c *climbServiceClient) GetCrag(ctx context.Context, in *GetCragRequest, opts ...grpc.CallOption) (*GetCragResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCragResponse)
	err := c.cc.Invoke(ctx, ClimbService_GetCrag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *climbServiceClient) ListCrags(ctx context.Context, in *ListCragsRequest, opts ...grpc.CallOption) (*ListCragsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCragsResponse)
	err := c.cc.Invoke(ctx, ClimbService_ListCrags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *climbServiceClient) UpdateCrag(ctx context.Context, in *UpdateCragRequest, opts ...grpc.CallOption) (*ListCragsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCragsResponse)
	err := c.cc.Invoke(ctx, ClimbService_UpdateCrag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClimbServiceServer is the server API for ClimbService service.
// All implementations must embed UnimplementedClimbServiceServer
// for forward compatibility.
type ClimbServiceServer interface {
	GetCrag(context.Context, *GetCragRequest) (*GetCragResponse, error)
	ListCrags(context.Context, *ListCragsRequest) (*ListCragsResponse, error)
	UpdateCrag(context.Context, *UpdateCragRequest) (*ListCragsResponse, error)
	mustEmbedUnimplementedClimbServiceServer()
}

// UnimplementedClimbServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClimbServiceServer struct{}

func (UnimplementedClimbServiceServer) GetCrag(context.Context, *GetCragRequest) (*GetCragResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrag not implemented")
}
func (UnimplementedClimbServiceServer) ListCrags(context.Context, *ListCragsRequest) (*ListCragsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCrags not implemented")
}
func (UnimplementedClimbServiceServer) UpdateCrag(context.Context, *UpdateCragRequest) (*ListCragsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrag not implemented")
}
func (UnimplementedClimbServiceServer) mustEmbedUnimplementedClimbServiceServer() {}
func (UnimplementedClimbServiceServer) testEmbeddedByValue()                      {}

// UnsafeClimbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClimbServiceServer will
// result in compilation errors.
type UnsafeClimbServiceServer interface {
	mustEmbedUnimplementedClimbServiceServer()
}

func RegisterClimbServiceServer(s grpc.ServiceRegistrar, srv ClimbServiceServer) {
	// If the following call pancis, it indicates UnimplementedClimbServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClimbService_ServiceDesc, srv)
}

func _ClimbService_GetCrag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCragRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClimbServiceServer).GetCrag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClimbService_GetCrag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClimbServiceServer).GetCrag(ctx, req.(*GetCragRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClimbService_ListCrags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCragsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClimbServiceServer).ListCrags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClimbService_ListCrags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClimbServiceServer).ListCrags(ctx, req.(*ListCragsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClimbService_UpdateCrag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCragRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClimbServiceServer).UpdateCrag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClimbService_UpdateCrag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClimbServiceServer).UpdateCrag(ctx, req.(*UpdateCragRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClimbService_ServiceDesc is the grpc.ServiceDesc for ClimbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClimbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClimbService",
	HandlerType: (*ClimbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrag",
			Handler:    _ClimbService_GetCrag_Handler,
		},
		{
			MethodName: "ListCrags",
			Handler:    _ClimbService_ListCrags_Handler,
		},
		{
			MethodName: "UpdateCrag",
			Handler:    _ClimbService_UpdateCrag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "climb.proto",
}
